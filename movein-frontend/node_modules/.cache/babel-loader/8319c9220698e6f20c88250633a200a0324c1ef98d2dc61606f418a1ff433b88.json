{"ast":null,"code":"var _jsxFileName = \"D:\\\\MoveIN\\\\movein-frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Mock user data for local development\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MOCK_USERS = [{\n  id: 1,\n  firstName: 'Тарас',\n  lastName: 'Шевченко',\n  email: 'test@example.com',\n  password: 'password123'\n}, {\n  id: 2,\n  firstName: 'Леся',\n  lastName: 'Українка',\n  email: 'user@example.com',\n  password: 'password123'\n}];\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Check for user in localStorage on initial load\n    const storedUser = localStorage.getItem('moveInUser');\n    if (storedUser) {\n      try {\n        setCurrentUser(JSON.parse(storedUser));\n      } catch (e) {\n        console.error('Failed to parse stored user', e);\n        localStorage.removeItem('moveInUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    setError('');\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // For now, mock the authentication\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\n\n      const user = MOCK_USERS.find(u => u.email.toLowerCase() === email.toLowerCase() && u.password === password);\n      if (!user) {\n        throw new Error('Невірна електронна пошта або пароль');\n      }\n\n      // Don't include password in the stored user object\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = user;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('moveInUser', JSON.stringify(userWithoutPassword));\n      return userWithoutPassword;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Signup function\n  const signup = async userData => {\n    setError('');\n    setLoading(true);\n    try {\n      // Check if email already exists\n      const existingUser = MOCK_USERS.find(u => u.email.toLowerCase() === userData.email.toLowerCase());\n      if (existingUser) {\n        throw new Error('Користувач з такою електронною поштою вже існує');\n      }\n\n      // In a real app, this would be an API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\n\n      // Create new user (in a real app this would be done on the server)\n      const newUser = {\n        id: MOCK_USERS.length + 1,\n        ...userData\n      };\n\n      // Add to mock users (this would persist only until page refresh in this example)\n      MOCK_USERS.push(newUser);\n\n      // Store user in state and localStorage (without password)\n      const {\n        password: _,\n        confirmPassword: __,\n        ...userWithoutPassword\n      } = newUser;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('moveInUser', JSON.stringify(userWithoutPassword));\n      return userWithoutPassword;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('moveInUser');\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    signup,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"vSB9Nc0q2BGZUhjg31O+gFt0Mxs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","MOCK_USERS","id","firstName","lastName","email","password","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","storedUser","localStorage","getItem","JSON","parse","e","console","removeItem","login","Promise","resolve","setTimeout","user","find","u","toLowerCase","Error","_","userWithoutPassword","setItem","stringify","message","signup","userData","existingUser","newUser","length","push","confirmPassword","__","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["D:/MoveIN/movein-frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Mock user data for local development\r\nconst MOCK_USERS = [\r\n  {\r\n    id: 1,\r\n    firstName: 'Тарас',\r\n    lastName: 'Шевченко',\r\n    email: 'test@example.com',\r\n    password: 'password123'\r\n  },\r\n  {\r\n    id: 2,\r\n    firstName: 'Леся',\r\n    lastName: 'Українка',\r\n    email: 'user@example.com',\r\n    password: 'password123'\r\n  }\r\n];\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Check for user in localStorage on initial load\r\n    const storedUser = localStorage.getItem('moveInUser');\r\n    if (storedUser) {\r\n      try {\r\n        setCurrentUser(JSON.parse(storedUser));\r\n      } catch (e) {\r\n        console.error('Failed to parse stored user', e);\r\n        localStorage.removeItem('moveInUser');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    setError('');\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // In a real app, this would be an API call\r\n      // For now, mock the authentication\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n      \r\n      const user = MOCK_USERS.find(\r\n        u => u.email.toLowerCase() === email.toLowerCase() && u.password === password\r\n      );\r\n      \r\n      if (!user) {\r\n        throw new Error('Невірна електронна пошта або пароль');\r\n      }\r\n      \r\n      // Don't include password in the stored user object\r\n      const { password: _, ...userWithoutPassword } = user;\r\n      setCurrentUser(userWithoutPassword);\r\n      localStorage.setItem('moveInUser', JSON.stringify(userWithoutPassword));\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async (userData) => {\r\n    setError('');\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Check if email already exists\r\n      const existingUser = MOCK_USERS.find(\r\n        u => u.email.toLowerCase() === userData.email.toLowerCase()\r\n      );\r\n      \r\n      if (existingUser) {\r\n        throw new Error('Користувач з такою електронною поштою вже існує');\r\n      }\r\n      \r\n      // In a real app, this would be an API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n      \r\n      // Create new user (in a real app this would be done on the server)\r\n      const newUser = {\r\n        id: MOCK_USERS.length + 1,\r\n        ...userData\r\n      };\r\n      \r\n      // Add to mock users (this would persist only until page refresh in this example)\r\n      MOCK_USERS.push(newUser);\r\n      \r\n      // Store user in state and localStorage (without password)\r\n      const { password: _, confirmPassword: __, ...userWithoutPassword } = newUser;\r\n      setCurrentUser(userWithoutPassword);\r\n      localStorage.setItem('moveInUser', JSON.stringify(userWithoutPassword));\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('moveInUser');\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    signup,\r\n    logout\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}