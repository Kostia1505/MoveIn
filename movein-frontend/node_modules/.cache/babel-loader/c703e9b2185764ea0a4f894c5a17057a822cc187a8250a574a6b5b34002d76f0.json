{"ast":null,"code":"var _jsxFileName = \"D:\\\\MoveIN_test\\\\movein-frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check if user has a theme preference in localStorage\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme ? savedTheme === 'dark' : true; // Default to dark mode\n  });\n\n  // Update localStorage and document class when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark-mode');\n      document.body.style.backgroundColor = '#000000';\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n      document.body.style.backgroundColor = '#ffffff';\n    }\n\n    // Apply CSS variables for theming\n    const root = document.documentElement;\n    if (isDarkMode) {\n      // Dark mode colors\n      root.style.setProperty('--bg-primary', '#000000');\n      root.style.setProperty('--bg-secondary', '#111827');\n      root.style.setProperty('--text-primary', '#ffffff');\n      root.style.setProperty('--text-secondary', '#94a3b8');\n      root.style.setProperty('--border-color', '#374151');\n    } else {\n      // Light mode colors\n      root.style.setProperty('--bg-primary', '#ffffff');\n      root.style.setProperty('--bg-secondary', '#f9fafb');\n      root.style.setProperty('--text-primary', '#111827');\n      root.style.setProperty('--text-secondary', '#4b5563');\n      root.style.setProperty('--border-color', '#e5e7eb');\n    }\n\n    // Ensure blue elements remain consistent in both themes\n    root.style.setProperty('--blue-primary', '#3b82f6');\n    root.style.setProperty('--blue-hover', '#2563eb');\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"xRy2PQm+RJuqiI/D0HNvZvA8Hsg=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","setItem","document","documentElement","classList","add","body","style","backgroundColor","remove","root","setProperty","toggleTheme","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["D:/MoveIN_test/movein-frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check if user has a theme preference in localStorage\r\n  const [isDarkMode, setIsDarkMode] = useState(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return savedTheme ? savedTheme === 'dark' : true; // Default to dark mode\r\n  });\r\n\r\n  // Update localStorage and document class when theme changes\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n    \r\n    if (isDarkMode) {\r\n      document.documentElement.classList.add('dark-mode');\r\n      document.body.style.backgroundColor = '#000000';\r\n    } else {\r\n      document.documentElement.classList.remove('dark-mode');\r\n      document.body.style.backgroundColor = '#ffffff';\r\n    }\r\n    \r\n    // Apply CSS variables for theming\r\n    const root = document.documentElement;\r\n    \r\n    if (isDarkMode) {\r\n      // Dark mode colors\r\n      root.style.setProperty('--bg-primary', '#000000');\r\n      root.style.setProperty('--bg-secondary', '#111827');\r\n      root.style.setProperty('--text-primary', '#ffffff');\r\n      root.style.setProperty('--text-secondary', '#94a3b8');\r\n      root.style.setProperty('--border-color', '#374151');\r\n    } else {\r\n      // Light mode colors\r\n      root.style.setProperty('--bg-primary', '#ffffff');\r\n      root.style.setProperty('--bg-secondary', '#f9fafb');\r\n      root.style.setProperty('--text-primary', '#111827');\r\n      root.style.setProperty('--text-secondary', '#4b5563');\r\n      root.style.setProperty('--border-color', '#e5e7eb');\r\n    }\r\n    \r\n    // Ensure blue elements remain consistent in both themes\r\n    root.style.setProperty('--blue-primary', '#3b82f6');\r\n    root.style.setProperty('--blue-hover', '#2563eb');\r\n    \r\n  }, [isDarkMode]);\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default ThemeContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}