{"ast":null,"code":"var _jsxFileName = \"D:\\\\MoveIN_test\\\\movein-frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check if user has a theme preference in localStorage\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme ? savedTheme === 'dark' : true; // Default to dark mode\n  });\n\n  // Update localStorage and document class when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Apply dark mode classes\n    const rootElement = document.documentElement;\n    if (isDarkMode) {\n      rootElement.classList.add('dark');\n      document.body.style.backgroundColor = '#000000';\n      document.body.style.color = '#ffffff';\n    } else {\n      rootElement.classList.remove('dark');\n      document.body.style.backgroundColor = '';\n      document.body.style.color = '';\n    }\n\n    // Update specific elements for dark/light mode\n    const updateSpecificElements = () => {\n      const inputs = document.querySelectorAll('input');\n      const buttons = document.querySelectorAll('button');\n      if (isDarkMode) {\n        // Dark mode styles\n        inputs.forEach(input => {\n          input.classList.add('dark-input');\n        });\n        buttons.forEach(button => {\n          if (button.classList.contains('bg-blue-600')) {\n            button.classList.add('dark-button');\n          }\n        });\n      } else {\n        // Light mode styles\n        inputs.forEach(input => {\n          input.classList.remove('dark-input');\n        });\n        buttons.forEach(button => {\n          button.classList.remove('dark-button');\n        });\n      }\n    };\n    updateSpecificElements();\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"xRy2PQm+RJuqiI/D0HNvZvA8Hsg=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","setItem","rootElement","document","documentElement","classList","add","body","style","backgroundColor","color","remove","updateSpecificElements","inputs","querySelectorAll","buttons","forEach","input","button","contains","toggleTheme","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["D:/MoveIN_test/movein-frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check if user has a theme preference in localStorage\r\n  const [isDarkMode, setIsDarkMode] = useState(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return savedTheme ? savedTheme === 'dark' : true; // Default to dark mode\r\n  });\r\n\r\n  // Update localStorage and document class when theme changes\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n    \r\n    // Apply dark mode classes\r\n    const rootElement = document.documentElement;\r\n    \r\n    if (isDarkMode) {\r\n      rootElement.classList.add('dark');\r\n      document.body.style.backgroundColor = '#000000';\r\n      document.body.style.color = '#ffffff';\r\n    } else {\r\n      rootElement.classList.remove('dark');\r\n      document.body.style.backgroundColor = '';\r\n      document.body.style.color = '';\r\n    }\r\n    \r\n    // Update specific elements for dark/light mode\r\n    const updateSpecificElements = () => {\r\n      const inputs = document.querySelectorAll('input');\r\n      const buttons = document.querySelectorAll('button');\r\n      \r\n      if (isDarkMode) {\r\n        // Dark mode styles\r\n        inputs.forEach(input => {\r\n          input.classList.add('dark-input');\r\n        });\r\n        \r\n        buttons.forEach(button => {\r\n          if (button.classList.contains('bg-blue-600')) {\r\n            button.classList.add('dark-button');\r\n          }\r\n        });\r\n      } else {\r\n        // Light mode styles\r\n        inputs.forEach(input => {\r\n          input.classList.remove('dark-input');\r\n        });\r\n        \r\n        buttons.forEach(button => {\r\n          button.classList.remove('dark-button');\r\n        });\r\n      }\r\n    };\r\n    \r\n    updateSpecificElements();\r\n  }, [isDarkMode]);\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default ThemeContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}